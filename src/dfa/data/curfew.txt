statechart curfew {

  type UserType = ADMIN | STUDENT;

  type LogType = ENTRY | EXIT | VACATION;

  type Request = CURFEW of harika | CORECURFEW of harika * harika | VACATION of Duration;

  type Request = CURFEW of int | CORECURFEW of int * string | VACATION of Duration;

  struct Duration {
    startTime : a;
    endTime : b;
  }

  events {
    selectRegister;
    selectLogin;
    login;
    register;
    loginCancel;
    curfewSubmit;
    coreCurfewSubmit;
    vacationSubmit;
    curfewSelect;
    coreCurfewSelect;
    vacationSelect;
  }

  state registration {
    userName : string;
    password : string;
    userType # : UserType;

  }

  state login {
    username # : string;
    password # : string; 
  }


  state adminDashboard {

  }
  state studentDashboard {

    state initial {

    }

    state requestCurfew {
      request # : Request;
    }

    state requestCoreCurfew {
      request # : Request;
    }

    state requestVacation {
      request # : Request;
    }

    state vacation {

    }

    transition initCurfew {
      source : curfew::studentDashboard::initial.a.b;
      destination : curfew.studentDashboard.requestCurfew;
      trigger: curfewSelect;
      guard:  login.username in registeredUsers.keys | 
              login.username in registeredUsers.keys |
              login.password = registeredUsers[login.username].password |
              registeredUsers[login.username].usertype = ADMIN |
              not login.password = registeredUsers[initial.username].password;
      action : {  
                  registeredUsers[registration.username] = User;
                  password := registration.password;
                  userType := registration.userType;
                }
    }

    transition initCoreCurfew {
      source : curfew.studentDashboard.initial;
      destination : curfew.studentDashboard.requestCoreCurfew;

      trigger: coreCurfewSelect;
      guard: true;
      action : {;}
    }

    transition initVacation {
      source : curfew.studentDashboard.initial;
      destination : curfew.studentDashboard.vacation;

      trigger: vacationSelect;
      guard: true;
      action : {;}
    }

    transition curfewInitSuccess {
      source : curfew.studentDashboard.requestCurfew;
      destination : curfew.studentDashboard.initial;

      trigger: curfewSubmit;
      guard: true;
      action : { requests.add( (loggedinUser,requestCurfew.request) ); }
    }

    transition coreCurfewInit {
      source : curfew.studentDashboard.requestCoreCurfew;
      destination : curfew.studentDashboard.initial;

      trigger: coreCurfewSubmit;
      guard: true;
      action : { requests.add( (loggedinUser, requestCoreCurfew.request) ); }
    }

    transition vacationInit {
      source : curfew.studentDashboard.initial;
      destination : curfew.login;

      trigger: vacationSubmit;
      guard: true;
      action : { requests.add( (loggedinUser, vacationCurfew.request) ); }
    }    

  }

  transition initRegister {
    source : curfew.studentDashboard.initial;
    destination : curfew.login;

    trigger: selectLogin;
    guard: true;
    action : { ;}
  }  

  transition studentDashboardInit {
    source : curfew.studentDashboard;
    destination : curfew.studentDashboard.initial;

    trigger : studentLogout;
    guard : true;
    action: { loggedinUser := login.username; }
  }

  transition loginInitCancel {
    source : curfew.login;
    destination : curfew.studentDashboard.initial;

    trigger : cancel;
    guard : true;
    action: {loggedinUser := ''; }
  }

  transition initRegister {
    source : curfew.studentDashboard.initial;
    destination : curfew.registration;

    trigger: selectRegister;
    guard: true;
    action : { ;}
  }

  transition registerInitSuccess {
    source : curfew.registration;
    destination : curfew.studentDashboard.initial;

    trigger : register;
    guard : not registration.username in registeredUsers.keys;
    action: { ;}

  }
  
}