import java_cup.runtime.*;
import java_cup.*;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.List;
import java.util.ArrayList;

import ast.*;

action code
{:
  ast.Statechart statechart = null;
:}
parser code 
{:
  public void syntax_error(Symbol s){
    System.out.println("compiler has detected a syntax error at line " + s.left 
      + " column " + s.right+"Symbol <"+s.toString()+">");
  }
:}

/*
non terminal event_definition,type_specifier,identifier_list,assignment_statement,arithmetic_expr,event_block,event_statement_list,event_dest_state,event_statement,guard_expression,action_statement,message_statement;
non terminal namespace_identifier,string_type,number_type,user_type,expr_LHS,expr_RHS;
non terminal cnfdnf_formula,relational_expr,logical_operator,relational_operator,trans_flow,trans_stmts;
*/

non terminal ast.Statechart       statechart;
non terminal ast.State            state;
non terminal ast.Transition       transition;
non terminal ast.Name             name;
// non terminal ast.Operator         OPER;
non terminal List<ast.State>      states;
non terminal List<ast.Transition> transitions;
//non terminal typestmt, input_var;
non terminal input_var;
non terminal ast.StructType structure;

non terminal ast.StatementList       statement_list;
non terminal ast.Statement           statement;
non terminal ast.AssignmentStatement assignment_statement;
non terminal ast.Expression          expr;

non terminal ast.DeclarationList decl_list;
non terminal ast.Declaration     decl;
non terminal String OPER;
non terminal idlist, events_list;

terminal String IDENTIFIER;
terminal Symbol
    LBRACE, RBRACE, LPAR, RPAR, LPAR_SQ,RPAR_SQ,     /* Brackets                 */
    SEMICOLON, COLON, COMMA, DOT,                    /* Punctuations             */ 
    ASSIGN, OP_MESSAGE,
    GOTO, DONE,                                      /* Control flow             */
    STATECHART, STATE, TRANSITION,                   /* Statechart related       */
    SRC, DEST,TRIGGER, GUARD, ACTION, STRUCT,         /* Transition label related */
    EMPTY, INIT, CLICK, LIST, DEFAULT, TYPE, EVENT,  /* Event related            */
    BELONGSTO,                                       /* Set theoretic            */
    VAR, IVAR, DVAR, MVAR, CONSTANT, STRING, NUMBER, /* Variables related        */
    AND, OR, NOT,                                    /* Logical operators        */
    INC, DEC,                                        /* Increment, decrement     */
    EQU, NEQ, GRE, GEQ, LES, LEQ,                    /* Relational operators     */
    MIN, ADD, MUL, DIV, UMIN, MOD,                   /* Arithmetic operators     */
    HASH, EVENTS;

precedence nonassoc LES, LEQ, EQU, NEQ, GRE, GEQ;
precedence left LBRACE, RBRACE, AND, OR;
precedence right DOT;

start with statechart;

/*********** fully qualified names like s1.s11 ****************/
name ::=
    IDENTIFIER:id {:
      RESULT = new ast.Name(id);
    :}
  |  name:idlist DOT IDENTIFIER:id
    {:
      RESULT = idlist;
      RESULT.add(id);
    :}
  ;


OPER ::= 
    ADD:a {:
      RESULT = new String("+");
    :}
  | AND
  | OR
  | NOT
  | GRE
  | LES
  | GEQ
  | LEQ
  | NEQ
  | MIN
  | UMIN
  | MOD
  | DIV
  | MUL

;


/*********** skeletal statechart structure - begin *******/
statechart ::= 
    STATECHART IDENTIFIER:id LBRACE
      structure:struc
      events_list:e_list
      decl_list:dlist
      states:st transitions:tr
    RBRACE
    {:
      RESULT = new ast.Statechart(id, struc, st, tr, dlist);
    :}
  ;
/*
typestmt ::= 
      IDENTIFIER:id1
      | typestmt OR IDENTIFIER:id1
  ;
*/
state ::= 
    STATE IDENTIFIER:id LBRACE
      decl_list:dlist
      states:st transitions:tr
    RBRACE
    {:
      RESULT = new ast.State(id, st, tr, dlist);
    :}
  ;

input_var ::=
    IDENTIFIER:id HASH COLON IDENTIFIER:tid SEMICOLON
  ;

states ::=
    states:slist state:s 
    {:
      RESULT = slist;
      RESULT.add(s);
    :}
  | {:
       RESULT = new ArrayList<ast.State>();
    :}
  ;

structure ::=   
    STRUCT IDENTIFIER:id LBRACE decl_list:dlist RBRACE
    {:
      RESULT = new ast.StructType(id,dlist);
    :}
  ;

events_list ::= 
    EVENTS LBRACE idlist RBRACE
  ;

idlist ::=
      IDENTIFIER SEMICOLON
      | idlist IDENTIFIER SEMICOLON
  ;

transition ::=
    TRANSITION IDENTIFIER:id LBRACE
      SRC  COLON name:src SEMICOLON
      DEST COLON name:des SEMICOLON
      TRIGGER COLON IDENTIFIER:id1 SEMICOLON
      GUARD COLON expr:g SEMICOLON
      ACTION COLON LBRACE statement:a RBRACE
    RBRACE
    {:
      RESULT = new ast.Transition(id, src, des, id1, g, a);
    :}
  ;

transitions ::=
    transitions:tlist transition:t 
    {:
      RESULT = tlist;
      RESULT.add(t);
    :}
  | {:
        RESULT = new ArrayList<ast.Transition>();
    :}
  ;
/*********** skeletal statechart structure - end *******/

/********** expressions for action language - begin ******/
/*
expr ::=
    name:n {:
      RESULT = n; //unary expression
    :}
     name:n1 OPER:o name:n2 
      {:
        RESULT = new ast.Name(n1.toString(),o,n2.toString()); //binary expression
      :}
  ;
  */

  expr ::= 
      name:n
      {:
        RESULT = n;
      :} 

      | expr:n OPER:o
      {:
        System.out.println(o);
        ast.UnaryExpr u = new ast.UnaryExpr(n,o);
        RESULT = u;
//        ast.Name.add(u); 
      :}
      | expr:n name:n1
      {:
        System.out.println(n1);
        ast.UnaryExpr u = new ast.UnaryExpr(n,n1);
        RESULT = u;
//        ast.Name.add(u); 
      :}
//      | OPER:o name:n 
//      {:
//        ast.Expression u = new ast.UnaryExpr(o,n);
//        RESULT = u;
//        ast.Name.add(u); 
//     :}
//      | expr:n1 OPER:p expr:n2 
//      {:
//        ast.BinaryExpr b = new ast.BinaryExpr(n1,p,n2);
//        RESULT = b;
//        System.out.println(p);
//        ast.Name.add(b); 
//      :}
  ;


statement_list::=
    statement_list:sl statement:s 
    {:
      sl.add(s);
      RESULT = sl;
    :}
  |
    {:
      RESULT = new ast.StatementList();
    :}
  ;

statement::=
    expr SEMICOLON
  | name:n ASSIGN expr:e SEMICOLON
    {:
      RESULT = new ast.AssignmentStatement(n, e);
    :}
  | LBRACE
      statement_list:sl
    RBRACE
    {:
      RESULT = sl;
    :}
  ;

decl_list ::= decl_list:dlist decl:d
    {:
      RESULT = dlist;
      if(!RESULT.add(d)) {
        throw new Exception("Duplication variable name '" + d.vname + "' declaration in same scope.");
      }
    :}
  | {:
      RESULT = new ast.DeclarationList();
    :}
  ;

decl ::=
     IDENTIFIER:id COLON IDENTIFIER:tid SEMICOLON
    {:
      RESULT = new ast.Declaration(id, tid);
    :}
    | IDENTIFIER:id HASH COLON IDENTIFIER:tid SEMICOLON // production rule for input variables
     {:
      RESULT = new ast.Declaration(id,"#",tid); 
    :}

  ;

/********** expressions for action language - end ******/

























/*
statement_list::=
	statement SEMICOLON
	| statement_list statement SEMICOLON
	| statement_list statement
	;

statement::=
	declaration_statement
	| COLON state_flowcontent
	| init_KEYWORD COLON empty_KEYWORD {: System.out.println ("Empty Init statement is seen"); :}
	| init_KEYWORD COLON assignment_statement {: System.out.println ("Init statement + assignment stmt is seen"); :}
	| default_KEYWORD COLON IDENTIFIER:id {: System.out.println ("Default state is "+id); :}
	;

declaration_statement::=
	IDENTIFIER:id COLON IDENTIFIER:tid SEMICOLON {}
	identifier_list COLON IDENTIFIER:id COMMA declaration_statement {: System.out.println ("Declaration statement is seen " + id); :}
	| identifier_list COLON IDENTIFIER:id {: System.out.println ("Declaration statement is seen of User type"); :}
	| identifier_list COLON STRING_KEYWORD {: System.out.println ("Declaration statement is seen of String type"); :}
	| identifier_list COLON IDENTIFIER:id1 LIST_KEYWORD COMMA declaration_statement {: System.out.println ("List of User type: "+id1); :}
	| identifier_list COLON IDENTIFIER:id1 LIST_KEYWORD {: System.out.println ("List of User type: "+id1); :}
	;
assignment_statement::= 
	expr_LHS OP_ASSIGN expr_RHS {: System.out.println ("Assignment statement is seen"); :}
	| expr_LHS OP_ASSIGN expr_RHS COMMA assignment_statement {: System.out.println ("Assignment statements is seen"); :}
	;

identifier_list::=
	IDENTIFIER:id {: System.out.println ("Identifier : "+id); :}
	|identifier_list COMMA IDENTIFIER:id {: System.out.println ("Identifier List : "+id); :}
	;


expr_RHS::=expr_LHS|arithmetic_expr|CONSTANT;
event_definition::=
	IDENTIFIER:id OP_DOT CLICK_KEYWORD LPAR_SQ cnfdnf_formula RPAR_SQ action_statement DONE_KEYWORD SEMICOLON {: System.out.println ("Event Declaration is seen : "+id); :} trans_stmts 
	| IDENTIFIER:id OP_DOT CLICK_KEYWORD LPAR_SQ RPAR_SQ action_statement DONE_KEYWORD SEMICOLON {: System.out.println ("Event Declaration is seen : "+id); :} trans_stmts 
	| IDENTIFIER:id OP_DOT CLICK_KEYWORD LPAR_SQ RPAR_SQ DONE_KEYWORD SEMICOLON {: System.out.println ("Event Declaration is seen : "+id); :} trans_stmts 
	| IDENTIFIER:id OP_DOT CLICK_KEYWORD LPAR_SQ cnfdnf_formula RPAR_SQ action_statement DONE_KEYWORD SEMICOLON {: System.out.println ("Event Declaration is seen : "+id); :}
	| IDENTIFIER:id OP_DOT CLICK_KEYWORD LPAR_SQ RPAR_SQ action_statement DONE_KEYWORD SEMICOLON {: System.out.println ("Event Declaration is seen : "+id); :}
	| IDENTIFIER:id OP_DOT CLICK_KEYWORD LPAR_SQ RPAR_SQ DONE_KEYWORD SEMICOLON {: System.out.println ("Event Declaration is seen : "+id); :} 

	;
cnfdnf_formula::= 
		relational_expr
		|relational_expr logical_operator cnfdnf_formula
		| namespace_identifier logical_operator cnfdnf_formula
		| namespace_identifier		
		;

relational_expr::=expr_RHS relational_operator expr_RHS;
logical_operator::=AND|OR;
relational_operator::=LES|LEQ|EQU|NEQ|GRE|GEQ|belongs_to_KEYWORD;
expr_LHS::=IDENTIFIER|namespace_identifier;
namespace_identifier::=IDENTIFIER:id OP_DOT IDENTIFIER:id2 {: System.out.println ("Name Space Identifier "+id +" " + id2); :}
		| namespace_identifier OP_DOT IDENTIFIER:id1 {: System.out.println ("Name Space Identifier "+id1); :}
		;
action_statement::= 
	assignment_statement {: System.out.println ("action statement is seen"); :}
	;

string_type::=IDENTIFIER:id COLON STRING_KEYWORD {: System.out.println ("String type: "+id); :} 
	;
number_type::=IDENTIFIER:id COLON NUMBER_KEYWORD {: System.out.println ("Number type: "+id); :} 
	;
user_type::=IDENTIFIER:id COLON IDENTIFIER:id1 LIST_KEYWORD {: System.out.println ("List of User type: "+id + "Type Name: " +id1); :} 
	| IDENTIFIER:id COLON IDENTIFIER:id1 {: System.out.println ("User type: "+id + "Type Name: " +id1); :} 
	;

*/
